# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, cl ]
        ssl_type: [ StaticSSL, DynamicSSL ]
        build_mode: [ Normal, ProxyHandshakeAuth, MINI_BUILD_MODE ]
        node-version: [ 18.x ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            toolset: msvc
            version: 2022
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            toolset: gcc
            version: 22.04
            gcc: 12
          - build_mode: Normal
            cmake_build_mode_string: "-DNeed_ProxyHandshakeAuth=OFF"
          - build_mode: ProxyHandshakeAuth
            cmake_build_mode_string: "-DNeed_ProxyHandshakeAuth=ON"
          - build_mode: MINI_BUILD_MODE
            cmake_build_mode_string: "-DMINI_BUILD_MODE=ON"
          - ssl_type: StaticSSL
            cmake_ssl_type_string: "-DOPENSSL_USE_STATIC_LIBS=ON"
          - ssl_type: DynamicSSL
            cmake_ssl_type_string: "-DOPENSSL_USE_STATIC_LIBS=OFF"
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      # - uses: lukka/get-cmake@latest

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build Web Html Js
        run: |
          cd html
          yarn install
          yarn run webpack
          cd ..

      - name: Remove File
        uses: Lyoko-Jeremie/js-rm-github-action@master
        with:
          path: |
            ${{ github.workspace }}/html/node_modules
            ${{ github.workspace }}/html/.yarn
            ${{ github.workspace }}/html/.editorconfig
            ${{ github.workspace }}/html/.gitattributes
            ${{ github.workspace }}/html/.gitignore
            ${{ github.workspace }}/html/.yarnrc.yml
            ${{ github.workspace }}/html/package.json
            ${{ github.workspace }}/html/tsconfig.json
            ${{ github.workspace }}/html/yarn.lock
            ${{ github.workspace }}/html/i18n-table
            ${{ github.workspace }}/html/i18n
            ${{ github.workspace }}/html/chart.js
            ${{ github.workspace }}/html/globalLib.d.ts
            ${{ github.workspace }}/html/webpack.config.js

      # ${{ github.workspace }}/html/lodash.min.js
      # ${{ github.workspace }}/html/moment.min.js
      # ${{ github.workspace }}/html/vue.js
      # ${{ github.workspace }}/html/zh-cn.js

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo git-rev=$(git log --pretty=format:'%H' -n 1)  >>  "$GITHUB_OUTPUT"

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.81.0
          platform_version: ${{matrix.version}}
          toolset: ${{matrix.toolset}}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DUSE_DYNAMIC_BOOST=OFF
          ${{ matrix.cmake_build_mode_string }}
          ${{ matrix.cmake_ssl_type_string }}
          -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include
          -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}/lib
          -S ${{ github.workspace }}
        # -DOPENSSL_USE_STATIC_LIBS=ON
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 12

      # - name: Test
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: ctest --build-config ${{ matrix.build_type }}

      - name: Copy html (Win)
        if: runner.os == 'Windows'
        uses: Lyoko-Jeremie/js-copy-github-action@master
        with:
          source: ${{ github.workspace }}/html/**/*
          target: ${{ steps.strings.outputs.build-output-dir }}/Release/html

      - name: Copy html (Linux)
        if: runner.os != 'Windows'
        uses: Lyoko-Jeremie/js-copy-github-action@master
        with:
          source: ${{ github.workspace }}/html/**/*
          target: ${{ steps.strings.outputs.build-output-dir }}/html

      - name: Copy config (Win)
        if: runner.os == 'Windows'
        uses: Lyoko-Jeremie/js-copy-github-action@master
        with:
          srcBase: ${{ github.workspace }}/example-config/
          source: ${{ github.workspace }}/example-config/FullConfig.json
          destBase: ${{ steps.strings.outputs.build-output-dir }}/Release/
          target: ${{ steps.strings.outputs.build-output-dir }}/Release/

      - name: Copy config (Linux)
        if: runner.os != 'Windows'
        uses: Lyoko-Jeremie/js-copy-github-action@master
        with:
          srcBase: ${{ github.workspace }}/example-config/
          source: ${{ github.workspace }}/example-config/FullConfig.json
          destBase: ${{ steps.strings.outputs.build-output-dir }}
          target: ${{ steps.strings.outputs.build-output-dir }}/


          # - name: Upload All (Win)
          #   if: runner.os == 'Windows'
          #   uses: actions/upload-artifact@v3
          #   with:
          #     name: Socks5BalancerAsioAll-${{ runner.os }}.zip
          #     path: ${{ steps.strings.outputs.build-output-dir }}

          # - name: Upload All (Linux)
          #   if: runner.os != 'Windows'
          #   uses: actions/upload-artifact@v3
          #   with:
          #     name: Socks5BalancerAsioAll-${{ runner.os }}.zip
          #     path: ${{ steps.strings.outputs.build-output-dir }}


      - name: OpenSSL DLL (Win DynamicSSL)
        # https://github.com/orgs/community/discussions/27152
        # https://github.com/actions/runner/issues/409
        if: ${{ (runner.os == 'Windows') && (matrix.ssl_type == 'DynamicSSL') }}
        uses: Lyoko-Jeremie/js-copy-github-action@master
        with:
          srcBase: "C:/Program Files/OpenSSL"
          source: "C:/Program Files/OpenSSL/*.dll"
          destBase: ${{ steps.strings.outputs.build-output-dir }}/Release/
          target: ${{ steps.strings.outputs.build-output-dir }}/Release/

      - name: Upload EXE (Win DynamicSSL)
        if: ${{ (runner.os == 'Windows') && (matrix.ssl_type == 'DynamicSSL') }}
        uses: actions/upload-artifact@v3
        with:
          name: Socks5BalancerAsio-${{ steps.strings.outputs.git-rev }}-${{ matrix.ssl_type }}-${{ matrix.build_mode }}-${{ runner.os }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/Release/Socks5BalancerAsio.exe
            ${{ steps.strings.outputs.build-output-dir }}/Release/FullConfig.json
            ${{ steps.strings.outputs.build-output-dir }}/Release/html
            ${{ steps.strings.outputs.build-output-dir }}/Release/*.dll

      - name: Upload EXE (Win StaticSSL)
        if: ${{ (runner.os == 'Windows') && (matrix.ssl_type == 'StaticSSL') }}
        uses: actions/upload-artifact@v3
        with:
          name: Socks5BalancerAsio-${{ steps.strings.outputs.git-rev }}-${{ matrix.ssl_type }}-${{ matrix.build_mode }}-${{ runner.os }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/Release/Socks5BalancerAsio.exe
            ${{ steps.strings.outputs.build-output-dir }}/Release/FullConfig.json
            ${{ steps.strings.outputs.build-output-dir }}/Release/html

      - name: Upload EXE (Linux)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: Socks5BalancerAsio-${{ steps.strings.outputs.git-rev }}-${{ matrix.ssl_type }}-${{ matrix.build_mode }}-${{ runner.os }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/Socks5BalancerAsio
            ${{ steps.strings.outputs.build-output-dir }}/FullConfig.json
            ${{ steps.strings.outputs.build-output-dir }}/html


        
